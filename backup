#!/bin/bash

# Live Ubuntu Backup
# Copyright (C) 2009 billbear <billbear@gmail.com>

# Generic Debian/Ubuntu Linux Live System Backup
# Copyright (c) 2024 blicker

# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program;
# if not, see <http://www.gnu.org/licenses>.

# Backup running Linux system (installed or live system) as a bootable squashfs file.
#
# Example of GNU GRUB config setting (grub.cfg) to boot squashfs backup file located in the root directory of any partition:
# menuentry "GNU/Linux in SQUASHFS IMAGE (Live CD mode, read only)" {
#	set gfxpayload=keep
#	insmod probe
#	insmod squash4
#	set file="/backup03.12.2021.squashfs"
#	search --no-floppy -f --set=SFSROOT $file
#	probe -u --set=SFSUUID ${SFSROOT}
#	loopback loop (${SFSROOT})/$file
#	set root=${SFSROOT}
#	linux (loop)/boot/vmlinuz root=UUID=${SFSUUID} squashfs=$file rw quiet splash locale=en_US.UTF-8 initramfs.runsize=50%
#	initrd (loop)/boot/initrd.img
# }
#
# You can put the squashfs backup file into an ISO disk image (e.g. replace the /casper/filesystem.squashfs in the official ubuntu ISO image with your own squashfs backup file) and edit grub.cfg to boot it:
# menuentry "Try Ubuntu live CD" {
#	set gfxpayload=keep
#	set file="/casper/filesystem.squashfs"
#	search --no-floppy -f --set=SFSROOT $file
#	probe -u --set=SFSUUID ${SFSROOT}
#	loopback loop (${SFSROOT})/$file
#	linux	(loop)/boot/vmlinuz root=UUID=${SFSUUID} rootfstype=iso9660 squashfs=/casper/filesystem.squashfs rw quiet splash locale=zh_CN.UTF-8 initramfs.runsize=50%
#	initrd	(loop)/boot/initrd.img
# }
#
# You can also use unsquashfs to extract the squashfs file into a partition in an VHD harddisk image file and boot from it:
# menuentry "GNU/Linux in VHD IMAGE (Hard disk mode, read and write)" {
#	set gfxpayload=keep
#	insmod probe
#	set file="/VirtualBox/linux.vhd"
#	search --no-floppy -f --set=SFSROOT $file
#	set root=${SFSROOT}
#	probe -u --set=SFSUUID ${SFSROOT}
#	loopback loop (${SFSROOT})/$file
#	linux (loop,msdos1)/boot/vmlinuz root=UUID=${SFSUUID} kloop=$file kroot=/dev/mapper/loop0p1 rw quiet splash locale=en_US.UTF-8 initramfs.runsize=50%
#	initrd (loop,msdos1)/boot/initrd.img
# }
#

mypath=$0

make_new(){
	local newobj="$*"
	i=0
	while [ -e $newobj ]; do
	i=`expr $i + 1`
	newobj="$*-$i"
	done
	echo $newobj
}

echored(){
	echo -e "\033[31m$*\033[0m"
	return 0
}


packagecheck(){
	[ $(find /bin /sbin /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin -name mksquashfs -type f) ] || { echored "Lack of essential package: squashfs-tools. Please install it."; exit 1; }
	[ $(find /bin /sbin /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin -name update-initramfs -type f) ] || { echored "Lack of essential package: initramfs-tools. Please install it."; exit 1; }
	[ $(find /bin /sbin /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin -name mkinitramfs -type f) ] || { echored "Lack of essential package: initramfs-tools-core. Please install it."; exit 1; }
}

distrocheck(){
	DISTRO=""
	if grep -Eqi "Ubuntu" /etc/issue || grep -Eqi "Ubuntu" /etc/*-release; then
		DISTRO='Ubuntu'
	elif grep -Eqi "Debian" /etc/issue || grep -Eqi "Debian" /etc/*-release; then
		DISTRO='Debian'
	elif grep -Eqi "Deepin" /etc/issue || grep -Eqi "Deepin" /etc/*-release; then
		DISTRO='Deepin'
	# You may add other distros here
	else
		DISTRO='Unknown'
	fi
}

patchcheck(){
	# Five files are pathed to make it possible to boot from squashfs file or virtual hard disk image file.
	# The five files are (eg. Ubuntu & Debian):
	#			/usr/sbin/mkinitramfs
	#			/usr/share/initramfs-tools/init
	#			/usr/share/initramfs-tools/scripts/local
	#			/usr/share/initramfs-tools/scripts/functions
	#			/usr/share/initramfs-tools/modules
	# Here we check whether these files were patched or not, 
	distrocheck
	case $DISTRO in
		Ubuntu)
			FUNCTIONSFILE=/usr/share/initramfs-tools/scripts/functions
			FUNCTIONSPATCH=/usr/share/backup/functions-ubuntu.patch
			LOCALFILE=/usr/share/initramfs-tools/scripts/local
			LOCALPATCH=/usr/share/backup/local-ubuntu.patch
			INITFILE=/usr/share/initramfs-tools/init
			INITPATCH=/usr/share/backup/init-ubuntu.patch
			MKINITRAMFSFILE=/usr/sbin/mkinitramfs
			MKINITRAMFSPATCH=/usr/share/backup/mkinitramfs-ubuntu.patch
			MODULESFILE=/usr/share/initramfs-tools/modules
			MODULESPATCH=/usr/share/backup/modules-ubuntu.patch
			if [ $(grep -c 'ln -s "$0" /tmp/mountroot-fail-hooks.d/"$0"' /usr/share/initramfs-tools/scripts/functions) -eq 1 ]; then
				sed -i 's/ln -s "$0" \/tmp\/mountroot-fail-hooks.d\/"$0"/ln -s "$0" \/tmp\/mountroot-fail-hooks.d\/"$1"/' /usr/share/initramfs-tools/scripts/functions
				update-initramfs -c -k $(uname -r)
			fi
			;;
		Debian)
			FUNCTIONSFILE=/usr/share/initramfs-tools/scripts/functions
			FUNCTIONSPATCH=/usr/share/backup/functions-debian.patch
			LOCALFILE=/usr/share/initramfs-tools/scripts/local
			LOCALPATCH=/usr/share/backup/local-debian.patch
			INITFILE=/usr/share/initramfs-tools/init
			INITPATCH=/usr/share/backup/init-debian.patch
			MKINITRAMFSFILE=/usr/sbin/mkinitramfs
			MKINITRAMFSPATCH=/usr/share/backup/mkinitramfs-debian.patch
			MODULESFILE=/usr/share/initramfs-tools/modules
			MODULESPATCH=/usr/share/backup/modules-debian.patch
			;;
		Deepin)
			FUNCTIONSFILE=/usr/share/initramfs-tools/scripts/functions
			FUNCTIONSPATCH=/usr/share/backup/functions-deepin.patch
			LOCALFILE=/usr/share/initramfs-tools/scripts/local
			LOCALPATCH=/usr/share/backup/local-deepin.patch
			INITFILE=/usr/share/initramfs-tools/init
			INITPATCH=/usr/share/backup/init-deepin.patch
			MKINITRAMFSFILE=/usr/sbin/mkinitramfs
			MKINITRAMFSPATCH=/usr/share/backup/mkinitramfs-deepin.patch
			MODULESFILE=/usr/share/initramfs-tools/modules
			MODULESPATCH=/usr/share/backup/modules-deepin.patch
			;;
		# You may add other distros here.
		*)
			echo "Unsupported distro. Please patch your initramfs-tools manually before trying to backup."
			exit 1
			;;
	esac
	local PN=0
	[ $(grep -c '###DO#NOT#DELETE#THIS#MARKER###' $FUNCTIONSFILE) -eq 0 ] && { patch $FUNCTIONSFILE < $FUNCTIONSPATCH; [ $? -gt 0 ] && { echored "Patch $FUNCTIONSFILE failed. Please update $FUNCTIONSPATCH"; exit 1;} || PN=1; }
	[ $(grep -c '###DO#NOT#DELETE#THIS#MARKER###' $MKINITRAMFSFILE) -eq 0 ] && { patch $MKINITRAMFSFILE < $MKINITRAMFSPATCH; [ $? -gt 0 ] && { echored "Patch $MKINITRAMFSFILE failed. Please update $MKINITRAMFSPATCH"; exit 1;} || PN=1; }
	[ $(grep -c '###DO#NOT#DELETE#THIS#MARKER###' $LOCALFILE) -eq 0 ] && { patch $LOCALFILE < $LOCALPATCH; [ $? -gt 0 ] && { echored "Patch $LOCALFILE failed. Please update $LOCALPATCH"; exit 1;} || PN=1; }
	[ $(grep -c '###DO#NOT#DELETE#THIS#MARKER###' $INITFILE) -eq 0 ] && { patch $INITFILE < $INITPATCH; [ $? -gt 0 ] && { echored "Patch $INITFILE failed. Please update $INITPATCH"; exit 1;} || PN=1; }
	[ $(grep -c '###DO#NOT#DELETE#THIS#MARKER###' $MODULESFILE) -eq 0 ] && { patch $MODULESFILE < $MODULESPATCH; [ $? -gt 0 ] && { echored "Patch $MODULESFILE failed. Please update $MODULESPATCH"; exit 1;} || PN=1; }
	[ $PN -gt 0 ] && update-initramfs -c -k $(uname -r)
}

rebuildtree(){ # Remounting the linux directories effectively excludes removable media, manually mounted devices, windows partitions, virtual files under /proc, /sys, /dev, the /host contents of a wubi install, etc. If your partition scheme is more complicated than listed below, you must add lines to rebuildtree() and destroytree(), otherwise the backup will be partial.
	mkdir /$1 /$2 /$3
	sleep 1
	mkdir /$1/{boot,cdrom,dev,etc,home,host,media,mnt,opt,proc,root,run,srv,sys,tmp,usr,var} /$2/{boot,etc,home,opt,root,usr,var,srv} /$3/{boot,etc,home,opt,root,usr,var,srv}
	cd /$1
	ln -s usr/bin bin
	ln -s usr/sbin sbin
	ln -s usr/lib lib
	ln -s usr/lib32 lib32
	ln -s usr/lib64 lib64
	ln -s home Users
	ln -s media Volumes
	cd -
##	Since systemd will load fstab and create automount units, and "systemctl restart local-fs.target" will creat mount points automatically, we do not need to creat each mount point according to /etc/fstab by he following code (therefore we comment out the following lines):
#	for i in /home/*; do
#		if [ -d $i ]; then
#			mkdir "/$1/media/${i#/home/}"
#			chmod 750 "/$1/media/${i#/home/}"
#			grep ${i#/home/} /etc/passwd | awk -F':' '{print $3":"$4}' | xargs -i chown {} "/$1/media/${i#/home/}"
#		fi
#	done
#	for i in `cat /etc/fstab | grep media | cut -s -d " " -f 2`; do
#		[ ! -d /$1$i ] && mkdir -p /$1$i;
#	done
	chmod ug+rwx,o+rwt /$1/tmp
	sleep 1
	mount -t overlay overlay -o rw,lowerdir=/boot,upperdir=/$2/boot,workdir=/$3/boot /$1/boot
	mount -t overlay overlay -o rw,lowerdir=/etc,upperdir=/$2/etc,workdir=/$3/etc /$1/etc
	mount -t overlay overlay -o rw,lowerdir=/home,upperdir=/$2/home,workdir=/$3/home /$1/home
	mount -t overlay overlay -o rw,lowerdir=/opt,upperdir=/$2/opt,workdir=/$3/opt /$1/opt
	mount -t overlay overlay -o rw,lowerdir=/root,upperdir=/$2/root,workdir=/$3/root /$1/root
	mount -t overlay overlay -o rw,lowerdir=/usr,upperdir=/$2/usr,workdir=/$3/usr /$1/usr
	mount -t overlay overlay -o rw,lowerdir=/var,upperdir=/$2/var,workdir=/$3/var /$1/var
	mount -t overlay overlay -o rw,lowerdir=/srv,upperdir=/$2/srv,workdir=/$3/srv /$1/srv
##	"sed -i" will ruin soft link. If /etc/fstab is a soft link, let it be:
	[ ! -L "/$1/etc/fstab" ] && sed -i 's/^[^#][^ \t]*[ \t]*\/[ \t].*[0-1]$/overlay \/ overlay rw 0 0/' /$1/etc/fstab
	[ -L "/$1/etc/fstab" ] && rm -rf "/$1/var/lib/bluetooth" && mkdir "/$1/var/lib/bluetooth" && chmod 700 "/$1/var/lib/bluetooth"
	local HIGHEST_KERNEL_VERSION=$(ls /boot | grep -P 'vmlinuz-\d+\.\d+\.\d+' | sort -V | tail -n 1 | cut -d '-' -f 2-)
	rm -f /$1/boot/vmlinuz /$1/boot/initrd.img /$1/boot/*.old
	ln -s /boot/vmlinuz-$HIGHEST_KERNEL_VERSION /$1/boot/vmlinuz
	ln -s /boot/initrd.img-$HIGHEST_KERNEL_VERSION /$1/boot/initrd.img
}

destroytree(){
	umount -l /$1/opt
	umount -l /$1/srv
	umount -l /$1/var
	umount -l /$1/root
	umount -l /$1/usr
	umount -l /$1/home
	umount -l /$1/etc
	umount -l /$1/boot
	rm -rf /$1 /$2 /$3
}


dequotepath(){ # If drag n drop from nautilus into terminal, the additional single quotes should be removed first.
	local tmpath="$*"
	[ "${tmpath#\'}" != "$tmpath" ] && [ "${tmpath%\'}" != "$tmpath" ] && { tmpath="${tmpath#\'}"; tmpath="${tmpath%\'}"; }
	echo "$tmpath"
}

checkbackupdir(){
	[ "${1#/}" = "$1" ] && { echored "You must specify the absolute path"; exit 1; }
	[ -d "$*" ] || { echored "$* does not exist, or is not a directory"; exit 1; }
#	[ `ls -A "$*" | wc -l` = 0 ] || { echored "$* is not empty"; exit 1; }
}

oemdeploy(){
	case $OEM in
		current|'')
			return
			;;
		*)
			oemdir="/usr/local/share/deploy/$OEM"
			[ ! -d "$oemdir" ] && return
			for i in `find /usr/local/share/deploy -type f,l | sed 's/\/usr\/local\/share\/deploy\/[^\/]*\//\//g' | sort -u | sed 's/ /===/g'`; do
				i=`echo $i | sed 's/===/ /g'`
				source="/"$1$i
				rm -rf "$source"
				filedir=`dirname "$source"`
				[ -d "$filedir" ] && [ -z "$(ls -A "$filedir" 2>/dev/null)" ] && rm -rf "$filedir"
			done
			for i in `find $oemdir -type f,l | sed 's/ /===/g'`; do
				i=`echo $i | sed 's/===/ /g'`
				local source="$1$i"
				rm -rf "/$1${source#$1$oemdir}"
				local filedir=`dirname "/$1${source#$1$oemdir}"`
				[ ! -d "$filedir" ] && mkdir -p "$filedir"
				cp -a "/$i" "/$1${source#$1$oemdir}"
			done
			for i in `find $oemdir -type d | sed 's/ /===/g'`; do
				i=`echo $i | sed 's/===/ /g'`
				local source="$1$i"
				if [ ! -e "/$1${source#$1$oemdir}" ]; then
					cp -a "/$i" "/$1${source#$1$oemdir}"
				fi
			done
			;;
	esac
}


dobackup(){
	bindingdir=`make_new /tmp/bind`
	deploy_upperdir=`make_new /tmp/upper`
	deploy_workdir=`make_new /tmp/work`
	if [ ! -z $BACKUPDIR ]; then
		if [ -e $BACKUPDIR ]; then
			BACKUPDIR="`dequotepath "$BACKUPDIR"`"
			BACKUPDIR=`echo $BACKUPDIR | sed 's/ /\\ /g'`
			checkbackupdir "$BACKUPDIR"
			backupdir=$BACKUPDIR
		else
			backupdir=`make_new /tmp/backup-$today`
		fi
	else
		backupdir=`make_new /tmp/backup-$today`
	fi

	bindingdir="${bindingdir#/}"
	deploy_upperdir="${deploy_upperdir#/}"
	deploy_workdir="${deploy_workdir#/}"
	backupdir="${backupdir#/}"
	packagecheck
	patchcheck
	echored "You are about to backup your system. It is recommended that you quit all open applications now. Continue?(y/n)"
	read yn
	[ "$yn" != "y" ] && exit 1

	exclude=`make_new /tmp/exclude`
	echo $backupdir/${OEM}backup${today}.squashfs | sed -e 's/^\///g' > $exclude
	echo $bindingdir >> $exclude
	echo etc/mtab >> $exclude
	echo etc/blkid.tab >> $exclude
	echo etc/udev/rules.d/70-persistent-net.rules >> $exclude
	find /var/{run,tmp,lock,crash}/ /var/cache/apt/archives/partial -mindepth 1 -maxdepth 1 2>/dev/null | sed -e 's/^\///g' >> $exclude
	find /var/{log,tmp,lock,crash,backups,mail,spool}/ /var/lib/ubiquity/ -type f 2>/dev/null | sed -e 's/^\///g' >> $exclude
	find /var -type f -regex ".*\.\(deb\|log*\|pid\|bak\|[0-9].gz\|kdecache*\)$" | sed -e 's/^\///g' >> $exclude
	find /var/lib/apt/lists/ /var/lib/app-info/yaml/ -type f 2>/dev/null | sed -e 's/^\///g' >> $exclude
	for i in /home/* /root; do
		echo "${i#/}/System Volume Information" >> $exclude
		echo "${i#/}"/.sudo_as_admin_successful >> $exclude
		echo "${i#/}"/.gvfs >> $exclude
		find "$i/.cache" -type f -name "event-sound-cache*" 2>/dev/null | sed -e 's/^\///g' >> $exclude
		echo "${i#/}"/.cache/evolution >> $exclude
		echo "${i#/}"/.cache/fontconfig >> $exclude
		echo "${i#/}"/.cache/gedit >> $exclude
		echo "${i#/}"/.cache/gnome-desktop-thumbnailer >> $exclude
		echo "${i#/}"/.cache/gnome-software >> $exclude
		echo "${i#/}"/.cache/gnome-calculator >> $exclude
		echo "${i#/}/.cache/clipboard-history@alexsaveau.dev" >> $exclude
		echo "${i#/}"/.cache/babl >> $exclude
		echo "${i#/}"/.cache/audacity >> $exclude
		echo "${i#/}/.cache/Docker Desktop" >> $exclude
		echo "${i#/}"/.cache/evolution >> $exclude
		echo "${i#/}"/.cache/fanal >> $exclude
		echo "${i#/}"/.cache/folks >> $exclude
		echo "${i#/}"/.cache/fontconfig >> $exclude
		echo "${i#/}"/.cache/FreeCAD >> $exclude
		echo "${i#/}"/.cache/gegl-0.4 >> $exclude
		echo "${i#/}"/.cache/gimp >> $exclude
		echo "${i#/}"/.cache/google-chrome >> $exclude
		echo "${i#/}"/.cache/microsoft-edge >> $exclude
		echo "${i#/}"/.cache/Microsoft >> $exclude
		echo "${i#/}"/.cache/gstreamer-1.0 >> $exclude
		echo "${i#/}"/.cache/libgweather >> $exclude
		echo "${i#/}"/.cache/mesa_shader_cache >> $exclude
		echo "${i#/}"/.cache/mozilla >> $exclude
		echo "${i#/}"/.cache/qtshadercache-x86_64-little_endian-lp64 >> $exclude
		echo "${i#/}"/.cache/samba >> $exclude
		echo "${i#/}"/.cache/thumbnails >> $exclude
		echo "${i#/}"/.cache/tracker3 >> $exclude
		echo "${i#/}"/.cache/ibus >> $exclude
		echo "${i#/}"/.cache/inkscape >> $exclude
		echo "${i#/}"/.cache/inkscape-extension-manager >> $exclude
		echo "${i#/}"/.cache/install4j >> $exclude
		echo "${i#/}"/.cache/libgweather >> $exclude
		echo "${i#/}"/.cache/matplotlib >> $exclude
		echo "${i#/}"/.cache/Meltytech >> $exclude
		echo "${i#/}"/.cache/mesa_shader_cache >> $exclude
		echo "${i#/}"/.cache/Microsoft >> $exclude
		echo "${i#/}"/.cache/microsoft-edge >> $exclude
		echo "${i#/}"/.cache/obexd >> $exclude
		echo "${i#/}"/.cache/org.gnome.SoundRecorder >> $exclude
		echo "${i#/}"/.cache/profiles >> $exclude
		echo "${i#/}"/.cache/QGIS >> $exclude
		echo "${i#/}"/.cache/remarkable >> $exclude
		echo "${i#/}"/.cache/rhythmbox >> $exclude
		echo "${i#/}"/.cache/shotwell >> $exclude
		echo "${i#/}"/.cache/smtube >> $exclude
		echo "${i#/}"/.cache/totem >> $exclude
		echo "${i#/}"/.cache/TTKN >> $exclude
		echo "${i#/}"/.cache/vinagre >> $exclude
		echo "${i#/}"/.cache/wemeetapp >> $exclude
		echo "${i#/}"/.cache/yelp >> $exclude
		echo "${i#/}"/.cache/zotero >> $exclude
		echo "${i#/}"/.cache/netease-cloud-music/AlbumCover >> $exclude
		echo "${i#/}"/.cache/netease-cloud-music/CachedSongs >> $exclude
		echo "${i#/}"/.cache/netease-cloud-music/Logs >> $exclude
		echo "${i#/}"/.cache/netease-cloud-music/StorageCache >> $exclude
		echo "${i#/}"/.cache/netease-cloud-music/TempFiles >> $exclude
		echo "${i#/}"/.cache/netease-cloud-music/Cef/console.log >> $exclude
		echo "${i#/}"/.cache/netease-cloud-music/Cef/UserData >> $exclude
		echo "${i#/}"/.cache/netease-cloud-music/Cef/Cache >> $exclude
		echo "${i#/}"/.thumbnails >> $exclude
		echo "${i#/}"/.local/share/gvfs-metadata >> $exclude
		echo "${i#/}"/.local/gvfs-metadata >> $exclude
		echo "${i#/}"/.local/share/Trash >> $exclude
		echo "${i#/}"/.engauge.log >> $exclude
		echo "${i#/}"/.wps-zotero-proxy.log >> $exclude
		echo "${i#/}"/.lesshst >> $exclude
		echo "${i#/}"/.steampath >> $exclude
		echo "${i#/}"/.steampid >> $exclude
		echo "${i#/}"/.steam/steam.pid >> $exclude
		echo "${i#/}"/.bash_history >> $exclude
		echo "${i#/}"/.bash_logout >> $exclude
		echo "${i#/}"/.Rhistory >> $exclude
		echo "${i#/}"/.gvfs >> $exclude
		echo "${i#/}"/.ollama/history >> $exclude
		echo "${i#/}"/.config/baidunetdisk/Cache >> $exclude
		echo "${i#/}/.config/baidunetdisk/Session Storage" >> $exclude
		echo "${i#/}"/.config/baidunetdisk/GPUCache >> $exclude
		echo "${i#/}/.config/baidunetdisk/Local Storage" >> $exclude
		echo "${i#/}/.config/baidunetdisk/crash logs" >> $exclude
		echo "${i#/}/.config/baidunetdisk/Crash Reports" >> $exclude
		echo "${i#/}/.config/baidunetdisk/Code Cache" >> $exclude
		echo "${i#/}"/.config/baidunetdisk/blob_storage >> $exclude
		echo "${i#/}/.config/google-chrome/Crash Reports" >> $exclude
		echo "${i#/}"/.config/google-chrome/GrShaderCache >> $exclude
		echo "${i#/}"/.config/google-chrome/Default/History >> $exclude
		echo "${i#/}/.config/google-chrome/Default/Media History" >> $exclude
		echo "${i#/}"/.config/Motrix/Cache >> $exclude
		echo "${i#/}/.config/Motrix/Crash Reports" >> $exclude
		echo "${i#/}"/.config/Motrix/logs >> $exclude
		echo "${i#/}/.config/Motrix/Local Storage" >> $exclude
		echo "${i#/}/.config/Motrix/Code Cache" >> $exclude
		echo "${i#/}"/.config/Motrix/blob_storage >> $exclude
		echo "${i#/}"/.config/Motrix/download.session >> $exclude
		echo "${i#/}"/.config/Motrix/Cookies >> $exclude
		echo "${i#/}"/.config/Motrix/engine.pid >> $exclude
		echo "${i#/}"/.config/Motrix/SingletonLock >> $exclude
		echo "${i#/}"/.config/Motrix/SingletonCookie >> $exclude
		echo "${i#/}"/.config/Motrix/GPUCache >> $exclude
		echo "${i#/}"/.config/zy/Cache >> $exclude
		echo "${i#/}"/.config/zy/GPUCache >> $exclude
		echo "${i#/}/.config/zy/Crash Reports" >> $exclude
		echo "${i#/}/.config/zy/Code Cache" >> $exclude
		echo "${i#/}"/.config/zy/blob_storage >> $exclude
		echo "${i#/}"/.aMule/Incoming >> $exclude
		echo "${i#/}"/.aMule/Temp >> $exclude
		echo "${i#/}"/.aMule/logfile >> $exclude
		echo "${i#/}"/R >> $exclude
		echo "${i#/}"/.local/share/Kingsoft/daemon >> $exclude
		echo "${i#/}"/.local/share/Kingsoft/office6/data/backup >> $exclude
		echo -e "${i#/}"/.cxoffice/Common/dosdevices/{a..z}::"\n" | sed -e 's/^\///g' -e 's/^ //g' -e '/^$/d' >> $exclude
		echo -e "${i#/}"/.cxoffice/Common/dosdevices/{f..y}:"\n" | sed -e 's/^\///g' -e 's/^ //g' -e '/^$/d' >> $exclude
		echo "${i#/}"/.vboxclient-clipboard.pid >> $exclude
		echo "${i#/}"/.vboxclient-display-svga-x11.pid >> $exclude
		echo "${i#/}"/.vboxclient-draganddrop.pid >> $exclude
		echo "${i#/}"/.vboxclient-seamless.pid >> $exclude
		echo "${i#/}"/.xsession-errors >> $exclude
		echo "${i#/}"/.oracle_jre_usage >> $exclude
		echo "${i#/}"/.vnc >> $exclude
		echo "${i#/}"/.grass8 >> $exclude
		echo "${i#/}"/.ssh >> $exclude
		echo "${i#/}"/.uim.d >> $exclude
		echo "${i#/}"/.config/QQ >> $exclude
		echo "${i#/}"/.config/webplotdigitizer >> $exclude
		echo "${i#/}"/.config/cef_user_data >> $exclude
		ls "$i/.xorgxrdp.*.log"  2>/dev/null | sed -e 's/^\///g' >> $exclude
		echo "${i#/}"/.ollama/history >> $exclude
		echo "${i#/}"/.sys1og.conf >> $exclude
		echo "${i#/}"/.xwechat >> $exclude
		echo "${i#/}"/.var >> $exclude
		echo "${i#/}"/.kube >> $exclude
		find "$i/.docker/desktop/log/" -type f -name "*.log*" 2>/dev/null | sed -e 's/^\///g' >> $exclude
		find "$i/.docker/desktop/tasks/" -type f 2>/dev/null | sed -e 's/^\///g' >> $exclude
		find "$i/.config/VirtualBox/" -type f -regex ".*\(\-prev\|\.log.*\)$" 2>/dev/null | sed -e 's/^\///g' >> $exclude
		find "$i"/{Downloads,Documents,Desktop,Movies,Music,Pictures,Public} -mindepth 1 -maxdepth 1 2>/dev/null | sed -e 's/^\///g' >> $exclude
	done
	find /home /root -type f -regex ".*\(-journal\|\.bak\|\.old\)$" | sed -e 's/^\///g' >> $exclude
	find /etc -type f -regex ".*\(~\|\.bak\|\old\)$" | sed -e 's/^\///g' >> $exclude
	#find /home /root -type f -name "*.log" 2>/dev/null | sed -e 's/^\///g' >> $exclude
	find /home /root -type s 2>/dev/null | sed -e 's/^\///g' >> $exclude
	echo root/.local/share/rstudio/log >> $exclude
	echo var/lib/dbus/machine-id >> $exclude
	echo -e {,boot,cdrom,dev,etc,home,host,media,mnt,opt,proc,root,run,srv,sys,tmp,usr,var}/{lost+found,"System Volume Information",.Trash,.Trashes,.fseventsd,.TemporaryItems,.lyndisk,.Trash-{1..2000}}"\n" | sed -e 's/^ //g' -e 's/^\///g' -e '/^$/d' >> $exclude
	echo usr/share/applications/wps-office-prometheus.desktop >> $exclude
	echo usr/share/applications/wps-office-uninstall.desktop >> $exclude
	echo usr/share/applications/wps-office-officeassistant.desktop >> $exclude
	echo usr/share/applications/htop.desktop >> $exclude
	echo usr/share/applications/lftp.desktop >> $exclude
	echo usr/share/applications/display-im6.q16.desktop >> $exclude
	echo usr/share/applications/R.desktop >> $exclude
	echo usr/share/applications/mpv.desktop >> $exclude
	echo usr/share/applications/lstopo.desktop >> $exclude
	echo etc/xdg/mimeapps.list >> $exclude # remove silly WPS Office file type binding
	for i in `swapon -s | grep file | cut -d " " -f 1`; do echo "${i#/}" >> $exclude; done
	cat $exclude | sort | uniq > $exclude"-uniq"
	mv $exclude"-uniq" $exclude

	echored "(For advanced users only) Specify other files/folders you want to exclude from the backup, one file/folder per line. You can drag and drop from Nautilus. End with an empty line.\nNote that the program has automatically excluded all removable media, windows partitions, manually mounted devices, files under /proc, /sys, /tmp, the /host contents of a wubi install, etc. So in most cases you can just hit enter now.\nIf you exclude important system files/folders, the backup will fail to restore."
	read ex
	while [ "$ex" != "" ]; do
	ex=`dequotepath "$ex"`
	[ "${ex#/}" = "$ex" ] && { echo "You must specify the absolute path"; read ex; continue; }
	[ -e "$ex" ] || { echo "$ex does not exist"; read ex; continue; }
	ex="${ex#/}"
	echo $ex >> $exclude
	read ex
	done

	rebuildtree $bindingdir $deploy_upperdir $deploy_workdir

	echored "Start to backup?(y/n)"
	read yn
	[ "$yn" != "y" ] && { destroytree $bindingdir $deploy_upperdir $deploy_workdir; rm $exclude; exit 1; }
	oemdeploy $bindingdir
	stime=`date`
	mkdir -p "/$backupdir"
#	SQUASHFSOPTS="-no-recovery -always-use-fragments -b 1M -noappend"
	SQUASHFSOPTS="-comp zstd -Xcompression-level 22 -no-recovery -always-use-fragments -b 1M -noappend"
#	SQUASHFSOPTS="-comp xz -no-recovery -always-use-fragments -b 1M -noappend"
	mksquashfs /$bindingdir "/$backupdir/${OEM}backup${today}.squashfs" $SQUASHFSOPTS -ef $exclude
	destroytree $bindingdir $deploy_upperdir $deploy_workdir
	echored "Your backup is ready in /$backupdir :)"
	echored " started at: $stime\nfinished at: `date`"
	tput bel
	rm -rf $exclude
}




echohelp(){
	echo "Generic Debian/Ubuntu Linux Live System Backup, Copyright (c) 2021 blicker
Backup your running Linux system as a compressed, bootable squashfs file.

Usage:
sudo $mypath -b                   Backup current running system to `make_new /tmp/backup-$today`"/"
sudo $mypath -b current /mnt/sdb2 Backup current running system to /mnt/sdb2/
sudo $mypath -b lenovo            Apply OEM settings to current system & backup to `make_new /tmp/backup-$today`"/"
sudo $mypath -b lenovo /mnt/sdb2  Apply OEM settings to current system & backup to /mnt/sdb2/
sudo $mypath -h                   View help.

You can specify where to save the backup, files/folders you want to exclude from the backup.
You don't need to umount external media, windows partitions, or any manually mounted partitions. They will be automatically ignored. Therefore you can save the backup to external media, windows partitions, etc.
Waring: You must make sure you have enough space to save the backup.

Example of GNU GRUB config setting (grub.cfg) to boot squashfs backup file located in the root directory of any partition:

 menuentry \"GNU/Linux in SQUASHFS IMAGE (Live CD mode, read only)\" {
	set gfxpayload=keep
	insmod probe
	insmod squash4
	set file="`make_new /backup$today.squashfs`"
	search --no-floppy -f --set=SFSROOT \$file
	probe -u --set=SFSUUID \${SFSROOT}
	loopback loop (\${SFSROOT})/\$file
	set root=\${SFSROOT}
	linux (loop)/boot/vmlinuz root=UUID=\${SFSUUID} squashfs=\$file rw quiet splash locale=en_US.UTF-8 initramfs.runsize=50%
	initrd (loop)/boot/initrd.img
 }

You can put the squashfs backup file into an ISO disk image (e.g. replace the /casper/filesystem.squashfs in the official ubuntu ISO image with your own squashfs backup file) and edit grub.cfg in the ISO image to boot it:

 menuentry \"Try Ubuntu live CD\" {
	set gfxpayload=keep
	set file=\"/casper/filesystem.squashfs\"
	search --no-floppy -f --set=SFSROOT \$file
	probe -u --set=SFSUUID \${SFSROOT}
	loopback loop (\${SFSROOT})/\$file
	linux	(loop)/boot/vmlinuz root=UUID=${SFSUUID} rootfstype=iso9660 squashfs=/casper/filesystem.squashfs rw quiet splash locale=zh_CN.UTF-8 initramfs.runsize=50%
	initrd	(loop)/boot/initrd.img
 }

Or you can manually restore it to a physical HD partion or a disk image file:

 MOUNT YOUR HD PARTITION OR DISK IMAGE FILE (eg. /VirtualBox/linux.vhd ) TO /mnt,
 cd /mnt
 sudo unsquashfs `make_new /backup$today.squashfs`
 sudo mv squashfs-root/* ./
 sudo rm -rf squashfs-root

EDIT fstab, change the root file system type and root partition UUID:

 sudo vi ./etc/fstab

And boot from it (GNU grub). Here is an example of booting from a VHD file:

 menuentry \"GNU/Linux in VHD IMAGE (Hard disk mode, read and write)\" {
	set gfxpayload=keep
	insmod probe
	set file="/VirtualBox/linux.vhd"
	search --no-floppy -f --set=SFSROOT \$file
	set root=\${SFSROOT}
	probe -u --set=SFSUUID \${SFSROOT}
	loopback loop (\${SFSROOT})/\$file
	linux (loop,msdos1)/boot/vmlinuz root=UUID=\${SFSUUID} kloop=\$file kroot=/dev/mapper/loop0p1 rw apparmor=0 quiet splash locale=en_US.UTF-8 initramfs.runsize=50%
	initrd (loop,msdos1)/boot/initrd.img
" | more
}

echousage(){
	echo "Usage:
sudo $mypath -b                   Backup current running system to `make_new /tmp/backup-$today`"/"
sudo $mypath -b current /mnt/sdb2 Backup current running system to /mnt/sdb2/
sudo $mypath -b lenovo            Apply OEM settings to current system & backup to `make_new /tmp/backup-$today`"/"
sudo $mypath -b lenovo /mnt/sdb2  Apply OEM settings to current system & backup to /mnt/sdb2/
sudo $mypath -h                   View help."
}

today=`date +%d.%m.%Y`
version="V3.9, Nov 24, 2024"
OPTION=$1
OEM=$2
BACKUPDIR=$3
if [ "`id -u`" == 0 ]; then
	if [ ! -z $OPTION ]; then
		case $OPTION in
			-h|--help)
				echohelp
				exit 0
				;;
			-b)
				dobackup
				exit 0
				;;
			*)
				echousage
				exit 1
				;;
		esac
	else
		echousage
		exit 1
	fi
else
	echo "Root privileges are required. Try \"sudo $0 $@\"".
	exit 1
fi
